Using pipelines for a webserver is a complex topic. The "best" solution  will most likely depend on your problem space. We are going to solve that by having the webserver handle the light load of receiving and sending requests, and having a single thread handle the actual work. This example is going to use starlette. The actual framework is not reallyimportant, but you might have to tune or change the code if you are using another framework to achieve the same effect. We will end with a simple example of how to use pipelines to create an inference engine for a web app. We hope this helps you get started with your own web app or app that you want to build. We'll be back in a few days with a more detailed example of using pipelines to build an in-memory database for an app that is running on a CPU or a GPU. Back to the page you came from. Click here to read the next part of the article, which includes the code for the server-side version of server.py and the API for the RESTful version of the app, which will be available in the next few days. Click there to see the next page, which contains the source code for both the server and the REST version. Back To the page we came from, which is the source of this article, and the version that you can use to build your app.